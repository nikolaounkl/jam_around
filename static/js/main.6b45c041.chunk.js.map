{"version":3,"sources":["components/LikeButton.js","components/PlayButton.js","components/Pagination.js","components/CommentButton.js","components/Songs.js","components/Navbar.js","components/Main.js","components/Comments.js","components/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["LikeButton","likesNum","songId","useState","count","liked","id","likes","setLikes","icon","onClick","e","preventDefault","axios","post","proxyurl","then","res","console","log","catch","err","className","PlayButton","url","Audio","audio","playing","setPlaying","useEffect","play","pause","useAudio","toggle","Pagination","songsPerPage","totalSongs","paginate","pageNumbers","i","Math","ceil","push","role","aria-label","map","number","key","to","CommentButton","song","comments","Songs","props","songs","setSongs","loading","setLoading","currentPage","setCurrentPage","a","get","data","fetchSongs","indexOfLastSong","indexOfFirstSong","currentSongs","slice","name","artist_name","music_file_path","src","cover_image_path","alt","length","pageNumber","Navbar","Main","Comments","message","setComments","postData","match","params","type","onChange","target","value","placeholder","history","NotFound","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b45c041.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst LikeButton = ({ likesNum, songId }) => {\r\n    const [likes, setLikes] = useState({\r\n        count: likesNum,\r\n        liked: false,\r\n        id: songId\r\n    });\r\n\r\n    // A quick fix for my local environment to take care the issue with cors policy block\r\n    const proxyurl = \"http://cors-anywhere.herokuapp.com/\";\r\n\r\n    const handleClick = e => {\r\n        e.preventDefault();\r\n        setLikes({\r\n            liked: !likes.liked,\r\n            count: likes.liked ? likes.count - 1 : likes.count + 1\r\n        });\r\n        axios\r\n            .post(\r\n                proxyurl +\r\n                    \"http://api-stg.jam-community.com/interact/like?apikey=___agAFTxkmMIWsmN9zOpM_6l2SkZPPy21LGRlxhYD8&id=\" +\r\n                    likes.id\r\n            )\r\n            .then(res => console.log(res))\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    const icon = likes.liked ? \"fas fa-thumbs-up\" : \"far fa-thumbs-up\";\r\n\r\n    return (\r\n        <>\r\n            <i onClick={handleClick} className={icon}></i>&nbsp;{likes.count}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LikeButton;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nconst PlayButton = ({ url }) => {\r\n    // Prepare & toggle play || pause audio function for the selected song\r\n    const useAudio = url => {\r\n        const [audio] = useState(new Audio(url));\r\n        const [playing, setPlaying] = useState(false);\r\n\r\n        const toggle = () => setPlaying(!playing);\r\n\r\n        useEffect(() => {\r\n            playing ? audio.play() : audio.pause();\r\n        }, [playing, audio]);\r\n\r\n        return [playing, toggle];\r\n    };\r\n\r\n    const [playing, toggle] = useAudio(url);\r\n\r\n    return (\r\n        <div>\r\n            <button className=\"button is-jam is-rounded\" onClick={toggle}>\r\n                <strong>{playing ? \"PAUSE\" : \"PLAY\"}</strong>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PlayButton;\r\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Pagination = ({ songsPerPage, totalSongs, paginate }) => {\r\n  const pageNumbers = [];\r\n\r\n  for (let i = 1; i <= Math.ceil(totalSongs / songsPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <nav className=\"pagination is-rounded\" role=\"navigation\" aria-label=\"pagination\">\r\n      <ul className=\"pagination-list\">\r\n        {pageNumbers.map(number => (\r\n          <li key={number} className='page-item'>\r\n            <Link to=\"/songs\" className=\"pagination-link\" onClick={() => paginate(number)}>\r\n              {number}\r\n            </Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst CommentButton = ({ song }) => {\r\n    return (\r\n        <>\r\n            <Link to={`/songs/${song.id}/comments`}>\r\n                <i className=\"far fa-comment\"></i>&nbsp;{song.comments}\r\n            </Link>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CommentButton;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport LikeButton from \"./LikeButton\";\r\nimport PlayButton from \"./PlayButton\";\r\nimport Pagination from \"./Pagination\";\r\nimport CommentButton from \"./CommentButton\";\r\n\r\nconst Songs = props => {\r\n    const [songs, setSongs] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [songsPerPage] = useState(4);\r\n\r\n    useEffect(() => {\r\n        // A quick fix for my local environment to take care the issue with cors policy block\r\n        const proxyurl = \"http://cors-anywhere.herokuapp.com/\";\r\n\r\n        const fetchSongs = async () => {\r\n            setLoading(true);\r\n            const res = await axios.get(\r\n                proxyurl + \"http://api-stg.jam-community.com/song/trending\"\r\n            );\r\n            setSongs(res.data);\r\n            setLoading(false);\r\n        };\r\n        fetchSongs();\r\n    }, []);\r\n\r\n    // Pagination variables to help us get the 4 current songs for each selected page\r\n    const indexOfLastSong = currentPage * songsPerPage;\r\n    const indexOfFirstSong = indexOfLastSong - songsPerPage;\r\n    const currentSongs = songs.slice(indexOfFirstSong, indexOfLastSong);\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n    if (loading) {\r\n        return (\r\n            <p>\r\n                <span className=\"has-text-jam\">Loading</span>{\" \"}\r\n                <span className=\"has-text-jam-secondary\">songs...</span>\r\n            </p>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"songs-wrapper\">\r\n                {currentSongs.map(song => (\r\n                    <div className=\"box\" key={song.id}>\r\n                        <div className=\"content has-text-left\">\r\n                            <span>SONG</span>\r\n                            <h2>\r\n                                <strong className=\"has-text-jam\">\r\n                                    {song.name}\r\n                                </strong>\r\n                            </h2>\r\n                            <p>\r\n                                By{\" \"}\r\n                                <strong className=\"has-text-jam-secondary\">\r\n                                    {song.artist_name}\r\n                                </strong>\r\n                            </p>\r\n                            <div className=\"button-bar\">\r\n                                <PlayButton url={song.music_file_path} />\r\n                                <LikeButton\r\n                                    likesNum={song.likes}\r\n                                    songId={song.id}\r\n                                />\r\n                                <CommentButton song={song} />\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <figure className=\"image jam-img\">\r\n                                <img src={song.cover_image_path} alt=\"\" />\r\n                            </figure>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <Pagination\r\n                songsPerPage={songsPerPage}\r\n                totalSongs={songs.length}\r\n                paginate={paginate}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Songs;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <div className=\"hero-head\">\r\n            <header className=\"navbar\">\r\n                <div className=\"container\">\r\n                    <div className=\"navbar-brand\">\r\n                        <Link to=\"/\" className=\"navbar-item\">\r\n                            <img src=\"jam_logo.png\" alt=\"Logo\" />\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Main = props => {\r\n    return (\r\n        <>\r\n            <h2 className=\"subtitle has-text-jam-secondary\">\r\n                Check out our top trending songs\r\n            </h2>\r\n            <button className=\"button is-dark is-rounded is-jam\">\r\n                <Link to=\"/songs\">LOAD SONGS</Link>\r\n            </button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nconst Comments = props => {\r\n    const [comments, setComments] = useState({\r\n        message: null\r\n    });\r\n\r\n    const handleChange = e => {\r\n        e.preventDefault();\r\n        setComments({\r\n            [e.target.id]: e.target.value\r\n        });\r\n    };\r\n\r\n    // A quick fix for my local environment to take care the issue with cors policy block\r\n    const proxyurl = \"http://cors-anywhere.herokuapp.com/\";\r\n\r\n    // Post data to be passed with the response\r\n    const postData = {\r\n        id: props.match.params,\r\n        type: \"song\",\r\n        message: comments.message\r\n    };\r\n\r\n    const postComment = e => {\r\n        e.preventDefault();\r\n        axios\r\n            .post(\r\n                proxyurl +\r\n                    \"http://api-stg.jam-community.com/interact/like?apikey=___agAFTxkmMIWsmN9zOpM_6l2SkZPPy21LGRlxhYD8\",\r\n                postData\r\n            )\r\n            .then(res => console.log(res))\r\n            .then(props.history.push(\"/songs\"))\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    return (\r\n        <div className=\"comment-wrapper has-text-left\">\r\n            <Link to=\"/songs\">\r\n                <span className=\"icon has-text-jam-secondary\">\r\n                    <i className=\"fas fa-arrow-circle-left fa-2x \"></i>\r\n                </span>\r\n            </Link>\r\n            <br />\r\n            <br />\r\n            <article className=\"media\">\r\n                <div className=\"media-content\">\r\n                    <div className=\"field\">\r\n                        <p className=\"control\">\r\n                            <textarea\r\n                                onChange={handleChange}\r\n                                className=\"textarea\"\r\n                                id=\"message\"\r\n                                placeholder=\"Add a comment...\"\r\n                            ></textarea>\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"field\">\r\n                        <div className=\"control\">\r\n                            <button\r\n                                onClick={postComment}\r\n                                className=\"button is-jam is-rounded\"\r\n                            >\r\n                                POST COMMENT\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </article>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comments;\r\n","import React from \"react\";\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <>\r\n            <h2 className=\"is-size-4\">\r\n                <span className=\"has-text-jam\">404</span> |{\" \"}\r\n                <span className=\"has-text-jam-secondary\">Page not found</span>\r\n            </h2>\r\n            <p className=\"lead\">Sorry, this page does not exist</p>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport Songs from \"./components/Songs\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport Main from \"./components/Main\";\r\nimport Comments from \"./components/Comments\";\r\nimport NotFound from \"./components/NotFound\";\r\n\r\nfunction App() {\r\n    return (\r\n        <BrowserRouter>\r\n            <section className=\"App hero is-black is-fullheight\">\r\n                <Navbar />\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container has-text-centered\">\r\n                        <Switch>\r\n                            <Route path=\"/\" exact component={Main} />\r\n                            <Route path=\"/songs\" exact component={Songs} />\r\n                            <Route path=\"/songs/:id/comments\" component={Comments} />\r\n                            <Route component={NotFound} />\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}